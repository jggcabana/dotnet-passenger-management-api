// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qless.Repositories.Data;

#nullable disable

namespace Qless.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardTypeDiscount", b =>
                {
                    b.Property<int>("CardTypesId")
                        .HasColumnType("int")
                        .HasColumnName("CardTypeId");

                    b.Property<int>("DiscountsId")
                        .HasColumnType("int")
                        .HasColumnName("DiscountId");

                    b.HasKey("CardTypesId", "DiscountsId");

                    b.HasIndex("DiscountsId");

                    b.ToTable("CardTypeDiscount");

                    b.HasData(
                        new
                        {
                            CardTypesId = 3,
                            DiscountsId = 1
                        },
                        new
                        {
                            CardTypesId = 3,
                            DiscountsId = 2
                        });
                });

            modelBuilder.Entity("Qless.Repositories.Data.DBModels.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresByDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InTransit")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<int>("TripCount")
                        .HasColumnType("int");

                    b.Property<int>("TripCountToday")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.ToTable("Cards", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("CardId");
                        });
                });

            modelBuilder.Entity("Qless.Repositories.Data.DBModels.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaximumBalance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("MaximumIdleDurationYears")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StartingBalance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("CardTypes", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("CardTypeId");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseRate = 15m,
                            DateCreated = new DateTime(2023, 9, 2, 5, 47, 5, 632, DateTimeKind.Utc).AddTicks(1086),
                            Description = "regular card",
                            MaximumBalance = 10000m,
                            MaximumIdleDurationYears = 5,
                            Name = "regular",
                            StartingBalance = 100m
                        },
                        new
                        {
                            Id = 2,
                            BaseRate = 10m,
                            DateCreated = new DateTime(2023, 9, 2, 5, 47, 5, 632, DateTimeKind.Utc).AddTicks(1092),
                            Description = "discounted card",
                            MaximumBalance = 10000m,
                            MaximumIdleDurationYears = 3,
                            Name = "discounted",
                            StartingBalance = 500m
                        },
                        new
                        {
                            Id = 3,
                            BaseRate = 10m,
                            DateCreated = new DateTime(2023, 9, 2, 5, 47, 5, 632, DateTimeKind.Utc).AddTicks(1094),
                            Description = "special discounted card",
                            MaximumBalance = 10000m,
                            MaximumIdleDurationYears = 3,
                            Name = "specialDiscounted",
                            StartingBalance = 500m
                        });
                });

            modelBuilder.Entity("Qless.Repositories.Data.DBModels.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailmentLimit")
                        .HasColumnType("int");

                    b.Property<int>("AvailmentLimitPerDay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFlatDiscount")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discounts", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("DiscountId");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailmentLimit = -1,
                            AvailmentLimitPerDay = -1,
                            DateCreated = new DateTime(2023, 9, 2, 5, 47, 5, 632, DateTimeKind.Utc).AddTicks(1202),
                            Description = "Base 20% discount for special cards",
                            DiscountValue = 20m,
                            IsFlatDiscount = false,
                            Name = "base",
                            Type = "basic"
                        },
                        new
                        {
                            Id = 2,
                            AvailmentLimit = -1,
                            AvailmentLimitPerDay = 4,
                            DateCreated = new DateTime(2023, 9, 2, 5, 47, 5, 632, DateTimeKind.Utc).AddTicks(1205),
                            Description = "3% discount for succeeding trips",
                            DiscountValue = 3m,
                            IsFlatDiscount = false,
                            Name = "succeeding",
                            Type = "special"
                        });
                });

            modelBuilder.Entity("CardTypeDiscount", b =>
                {
                    b.HasOne("Qless.Repositories.Data.DBModels.CardType", null)
                        .WithMany()
                        .HasForeignKey("CardTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qless.Repositories.Data.DBModels.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qless.Repositories.Data.DBModels.Card", b =>
                {
                    b.HasOne("Qless.Repositories.Data.DBModels.CardType", "CardType")
                        .WithMany()
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");
                });
#pragma warning restore 612, 618
        }
    }
}
